// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PGADMIN_DB_URL")
}

// User model for authentication and profile management
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  role       UserRole @default(USER)
  isVerified Boolean  @default(false)
  name       String?
  avatar     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  events        Event[]
  notifications Notification[]
  studyPartners Study_partner[]
  eventPartners Event_partner[]
  Account       Account?
  GoogleTokens google_tokens?

  @@map("users")
}

model Account {
  id           String   @id @default(cuid())
  userId       String   @unique
  refreshToken String
  expiryDate   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}
model google_tokens{
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String
  expiryDate   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("google_tokens")
}

// EventType model for organizing events
model Event_type {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#4CD964")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events Event[]

  @@map("event_types")
}

// Main Event model
model Event {
  id          String    @id
  title       String
  description String?
  location    String?

  // Date and time fields
  startDate DateTime
  endDate   DateTime
  startTime String // Format: "HH:MM"
  endTime   String // Format: "HH:MM"
  isAllDay  Boolean  @default(false)

  // Event properties
  color    String?     @default("#3b82f6")
  priority Priority    @default(MEDIUM)
  status   EventStatus @default(SCHEDULED)

  // Recurrence
  isRecurring    Boolean @default(false)
  recurrenceRule String? // RULE format for recurring events

  // Foreign keys
  userId     String
  eventTypeId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType     Event_type       @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  reminders     Reminder[]
  checklist     ChecklistItem[]
  partners      Event_partner[]
  notifications Notification[]

  @@map("events")
}

// Checklist items for event preparation
model ChecklistItem {
  id        String   @id @default(cuid())
  text      String
  status    Boolean  @default(false)
  order     Int      @default(0)
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

// Study partners for collaboration
model Study_partner {
  id        String   @id @default(cuid())
  name      String
  email     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  events Event_partner[]

  @@unique([email, userId])
  @@map("study_partners")
}

// Junction table for many-to-many relationship between events and study partners
model Event_partner {
  id             String        @id @default(cuid())
  eventId        String
  studyPartnerId String
  userId         String
  status         PartnerStatus @default(INVITED)
  createdAt      DateTime      @default(now())

  // Relations
  event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  studyPartner Study_partner @relation(fields: [studyPartnerId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, studyPartnerId])
  @@map("event_partners")
}

// Reminders for events
model Reminder {
  id           String    @id @default(cuid())
  eventId      String
  reminderTime String // e.g., "1 hour before", "15 minutes before"
  reminderDate DateTime? // Calculated reminder date/time
  isTriggered  Boolean   @default(false)
  createdAt    DateTime  @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

// Notifications for users
model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String?
  type      NotificationType @default(REMINDER)
  isRead    Boolean          @default(false)
  userId    String
  eventId   String?
  dueDate   DateTime?
  createdAt DateTime         @default(now())

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Priority {
  LOW
  MEDIUM
  HIGH

  @@map("priority")
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("event_status")
}

enum UserRole {
  ADMIN
  USER
  GUEST

  @@map("user_role")
}

enum PartnerStatus {
  INVITED
  ACCEPTED
  DECLINED

  @@map("partner_status")
}

enum NotificationType {
  REMINDER
  DEADLINE
  INVITATION
  UPDATE

  @@map("notification_type")
}
